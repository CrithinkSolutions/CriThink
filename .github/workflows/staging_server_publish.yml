name: staging_server_publish

env:
  PROJECT_WEB: 'src/CriThink.Server/CriThink.Server.Web/CriThink.Server.Web.csproj'
  PROJECT_INFRASTRUCTURE: 'src/CriThink.Server/CriThink.Server.Infrastructure/CriThink.Server.Infrastructure.csproj'
  ASPNETCORE_ENVIRONMENT: Staging
  AWS_ARN_SECRET: arn:aws:secretsmanager:eu-central-1:138772879872:secret:staging/CriThink/Server-7RXWDm

on:
  # pull_request:
  push:
    # paths: src/CriThink.Server/**
    branches: [ feature/pipeline-migrations ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgis/postgis:12-2.5
        env:
          # must specify password for PG Docker container image, see: https://registry.hub.docker.com/_/postgres?tab=description&page=1&name=10
          POSTGRES_PASSWORD: password
          #POSTGRES_DB: your_test_db_name
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.202
    - name: Read secrets from AWS Secrets Manager
      uses: abhilash1in/aws-secrets-manager-action@v1.0.1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        secrets: staging/CriThink/Server
        parse-json: true
    - name: Add AWS security group exception
      uses: sohelamin/aws-security-group-add-ip-action@master
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        aws-security-group-id: ${{ secrets.AWS_STAGING_SECURITY_GROUP_ID }}
        port: '5432'
        to-port: '5432'
        protocol: 'tcp'
        description: 'GitHub'
    
    - name: dotnet Clean
      run: dotnet clean ${{env.PROJECT_WEB}}
      
    - name: dotnet Restore dependencies
      run: dotnet restore ${{env.PROJECT_WEB}}

    - name: dotnet Build
      run: dotnet build ${{env.PROJECT_WEB}} -c Release --no-restore

    - name: dotnet Publish
      run: dotnet publish ${{env.PROJECT_WEB}} -c Release -o develop_crithink_server --self-contained false -r linux-x64
    
    - name: Installing EF tools
      run: |
        dotnet tool install --global dotnet-ef 
        dotnet tool restore

    
      
    - name: Running EF migrations
      run: |
        dotnet-ef database update -s ${{env.PROJECT_WEB}} -p ${{env.PROJECT_INFRASTRUCTURE}} --configuration Release -v --runtime linux-x64 -- '${{env.STAGING_CRITHINK_SERVER_CONNECTIONSTRINGS_CRITHINKDBPGSQLCONNECTION}}'

    # - name: Generates EF migration script
    #   run: dotnet-ef migrations script --output "script.sql" -s ${{env.PROJECT_WEB}} -p ${{env.PROJECT_INFRASTRUCTURE}} -v -i

    # - name: deploy EF script
    #   run: psql host=crithink-staging-postgresql.creu7xphbkbp.eu-central-1.rds.amazonaws.com port=5432 dbname=CrithinkStagingDb user=crithink_admin password=6TTD49ZtAKVmQ2sRIT1S -f script.sql
      
      #psql -h crithink-staging-postgresql.creu7xphbkbp.eu-central-1.rds.amazonaws.com -U crithink_admin -p 5432 -W 6TTD49ZtAKVmQ2sRIT1S -d CrithinkStagingDb -f script.sql

      # psql postgresql://${{env.STAGING_CRITHINK_SERVER_CONNECTIONSTRINGS_CRITHINKDBPGSQLCONNECTION}} -f script.sql
      # dotnet-ef database update -s ${{env.PROJECT_WEB}} -p ${{env.PROJECT_INFRASTRUCTURE}} --configuration Release -v --runtime linux-x64 --connection ${{env.STAGING_CRITHINK_SERVER_CONNECTIONSTRINGS_CRITHINKDBPGSQLCONNECTION}} -- -c ${{env.STAGING_CRITHINK_SERVER_CONNECTIONSTRINGS_CRITHINKDBPGSQLCONNECTION}}