name: staging_server_publish

env:
  projectPath: 'src/CriThink.Server/CriThink.Server.Web/CriThink.Server.Web.csproj'
  migrationPath: 'src/CriThink.Server/CriThink.Server.Infrastructure/CriThink.Server.Infrastructure.csproj'
  ASPNETCORE_ENVIRONMENT: Staging,
  AWS_ARN_SECRET: arn:aws:secretsmanager:eu-central-1:138772879872:secret:staging/CriThink/Server-7RXWDm

on:
  push:
    # paths: src/CriThink.Server/**
    branches: [ feature/pipeline-migrations ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.101
    - name: Read secrets from AWS Secrets Manager
      uses: abhilash1in/aws-secrets-manager-action@v1.0.1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        secrets: staging/CriThink/Server
        parse-json: true
    - name: Add AWS security group exception
      uses: sohelamin/aws-security-group-add-ip-action@master
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        aws-security-group-id: ${{ secrets.AWS_STAGING_SECURITY_GROUP_ID }}
        port: '5432'
        to-port: '5432'
        protocol: 'tcp'
        description: 'GitHub'
    
    - name: dotnet Clean
      run: dotnet clean ${{env.projectPath}}
      
    - name: dotnet Restore dependencies
      run: dotnet restore ${{env.projectPath}}

    - name: dotnet Build
      run: dotnet build ${{env.projectPath}} -c Release --no-restore

    - name: dotnet Publish
      run: |
        dotnet publish ${{env.projectPath}} -c Release -o staging_crithink_server --self-contained false -r linux-x64
        
    - name: Build deployment package
      run: cd staging_crithink_server && zip -r staging-server-deploy-package.zip * && cd .
      
    - name: Copy deployment package
      uses: canastro/copy-file-action@master
      with:
        source: "staging_crithink_server/staging-server-deploy-package.zip"
        target: "staging-server-deploy-package.zip"
    
    - name: Get timestamp
      uses: gerred/actions/current-time@master
      id: current-time
    
    - name: Run string replace
      uses: frabert/replace-string-action@master
      id: format-time
      with:
        pattern: '[:\.]+'
        string: "${{ steps.current-time.outputs.time }}"
        replace-with: '-'
        flags: 'g'

    # - name: Deploy to AWS Beanstalk
    #   uses: einaregilsson/beanstalk-deploy@v10
    #   with:
    #     aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     region: ${{ secrets.AWS_REGION }}
    #     application_name: CriThink
    #     environment_name: Staging
    #     version_label: "staging-app-web-${{ steps.format-time.outputs.replaced }}"
    #     deployment_package: staging-server-deploy-package.zip

    - name: Deployed successfully!
      run: echo Staging App deployed to ELB
    
    - name: Installing EF tools
      run: |
        dotnet tool install --global dotnet-ef
        dotnet tool restore

    - name: Running EF migrations
      run: dotnet-ef database update -s ${{env.projectPath}} -p ${{env.migrationPath}} -v --runtime linux-x64 --connection ${{env.STAGING_CRITHINK_SERVER_CONNECTIONSTRINGS_CRITHINKDBPGSQLCONNECTION}} --configuration Release -- --environment Staging

    - name: Database Updated
      run: echo Database successfully updated