name: terraform_deploy

on:
  workflow_call:
      inputs:

        environment:
          required: true
          type: string
          description: 'Environment to deploy. Possible values are staging and production'
          
        tf_version:
          required: true
          type: string
          description: 'Terraform version'

jobs:
  path_filters:
    runs-on: ubuntu-latest

    outputs:
      terraformPath: ${{ steps.filter.outputs.terraform }}
      terraformBackendPath: ${{ steps.filter.outputs.terraformBackend }}
      terraformGlobalPath: ${{ steps.filter.outputs.terraformGlobal }}
      terraformEnvPath: ${{ steps.filter.outputs.terraformEnv }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            terraform:
              - 'terraform/**'
            terraformBackend:
              - 'terraform/backend/**'
            terraformGlobal:
              - 'terraform/environments/global/**'
              - 'terraform/environments/_modules/**'
            terraformEnv:
              - 'terraform/environments/${{ inputs.environment }}/**'
              - 'terraform/environments/_modules/**'
      
      - name: Terraform Backend Enable
        if: steps.filter.outputs.terraform.backend == 'true'
        run: echo "Preparing to deploy Terraform backend"

      - name: Terraform Global Enable
        if: steps.filter.outputs.terraformGlobalPath == 'true'
        run: echo "Preparing to deploy Terraform Global environment"

      - name: Terraform Environments Enable
        if: steps.filter.outputs.terraformEnvPath == 'true'
        run: echo "Preparing to deploy Terraform ${{ inputs.environment }} environment"

  terraform_preparation:
    runs-on: ubuntu-latest
    needs: path_filters
    if: needs.path_filters.outputs.terraformPath == 'true'

    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.tf_version }}

      - name: "Az CLI login"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_LOGIN }}

  terraform_backend:
    runs-on: ubuntu-latest
    needs: terraform_preparation
    if: needs.path_filters.outputs.terraformBackendPath == 'true'

    env:
      TERRAFORM_BACKEND_PATH: './terraform/backend'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v1
      #   with:
      #     terraform_version: ${{ inputs.tf_version }}

      - name: Terraform Format
        id: fmt
        working-directory: ${{ env.TERRAFORM_BACKEND_PATH }}
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        working-directory: ${{ env.TERRAFORM_BACKEND_PATH }}
        run: terraform init

      - name: Terraform Validate
        id: validate
        working-directory: ${{ env.TERRAFORM_BACKEND_PATH }}
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TERRAFORM_BACKEND_PATH }}
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v6
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        working-directory: ${{ env.TERRAFORM_BACKEND_PATH }}
        run: terraform apply -auto-approve -input=false

  terraform_global:
    runs-on: ubuntu-latest
    needs: terraform_preparation
    if: needs.path_filters.outputs.terraformGlobal == 'true'
    
    env:
      TERRAFORM_ENV_PATH: './terraform/environments/global'

    steps:
      # - name: Checkout
      #   uses: actions/checkout@v2
        
      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v1
      #   with:
      #     terraform_version: ${{ inputs.tf_version }}

      - name: Terraform Format
        id: fmt
        working-directory: ${{ env.TERRAFORM_ENV_PATH }}
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        working-directory: ${{ env.TERRAFORM_ENV_PATH }}
        run: terraform init

      - name: Terraform Validate
        id: validate
        working-directory: ${{ env.TERRAFORM_ENV_PATH }}
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TERRAFORM_ENV_PATH }}
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v6
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        working-directory: ${{ env.TERRAFORM_ENV_PATH }}
        run: terraform apply -auto-approve -input=false

  terraform_environment:
    runs-on: ubuntu-latest
    needs: terraform_preparation
    if: needs.path_filters.outputs.terraformEnvPath == 'true'
    
    env:
      TERRAFORM_ENV_PATH: './terraform/environments/${{ inputs.environment}} '

    steps:
      # - name: Checkout
      #   uses: actions/checkout@v2
        
      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v1
      #   with:
      #     terraform_version: ${{ inputs.tf_version }}

      - name: Terraform Format
        id: fmt
        working-directory: ${{ env.TERRAFORM_ENV_PATH }}
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        working-directory: ${{ env.TERRAFORM_ENV_PATH }}
        run: terraform init

      - name: Terraform Validate
        id: validate
        working-directory: ${{ env.TERRAFORM_ENV_PATH }}
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TERRAFORM_ENV_PATH }}
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v6
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        working-directory: ${{ env.TERRAFORM_ENV_PATH }}
        run: terraform apply -auto-approve -input=false