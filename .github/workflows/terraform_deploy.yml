name: terraform_deploy

on:
  workflow_call:
    inputs:

      environment:
        required: true
        type: string
        description: 'Environment to deploy. Possible values are staging and production'
        
      tf_version:
        required: true
        type: string
        description: 'Terraform version'

env:
  AZURE_OWNER_USERNAME: ${{ secrets.AZURE_OWNER_USERNAME }}
  AZURE_OWNER_PASSWORD: ${{ secrets.AZURE_OWNER_PASSWORD }}

jobs:

  terraform_backend:
    runs-on: ubuntu-latest

    env:
      TERRAFORM_BACKEND_PATH: './terraform/backend'

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: AZ login
        shell: bash
        run: |
          az login -u "$AZURE_OWNER_USERNAME" -p "$AZURE_OWNER_PASSWORD"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.tf_version }}

      - name: Terraform Format
        id: fmt
        working-directory: ${{ env.TERRAFORM_BACKEND_PATH }}
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        working-directory: ${{ env.TERRAFORM_BACKEND_PATH }}
        run: terraform init

      - name: Terraform Validate
        id: validate
        working-directory: ${{ env.TERRAFORM_BACKEND_PATH }}
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TERRAFORM_BACKEND_PATH }}
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        working-directory: ${{ env.TERRAFORM_BACKEND_PATH }}
        run: terraform apply -auto-approve -input=false

  terraform_global:
    runs-on: ubuntu-latest
    needs: terraform_backend

    env:
      TERRAFORM_ENV_PATH: './terraform/environments/global'

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: AZ login
        shell: bash
        run: |
          az login -u "$AZURE_OWNER_USERNAME" -p "$AZURE_OWNER_PASSWORD"

      - name: Terraform Format
        id: fmt
        working-directory: ${{ env.TERRAFORM_ENV_PATH }}
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        working-directory: ${{ env.TERRAFORM_ENV_PATH }}
        run: terraform init

      - name: Terraform Validate
        id: validate
        working-directory: ${{ env.TERRAFORM_ENV_PATH }}
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TERRAFORM_ENV_PATH }}
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        working-directory: ${{ env.TERRAFORM_ENV_PATH }}
        run: terraform apply -auto-approve -input=false

  terraform_environment:
    runs-on: ubuntu-latest
    needs: terraform_global

    env:
      TERRAFORM_ENV_PATH: './terraform/environments/${{ inputs.environment}}'

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: AZ login
        shell: bash
        run: |
          az login -u "$AZURE_OWNER_USERNAME" -p "$AZURE_OWNER_PASSWORD"

      - name: Terraform Format
        id: fmt
        working-directory: ${{ env.TERRAFORM_ENV_PATH }}
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        working-directory: ${{ env.TERRAFORM_ENV_PATH }}
        run: terraform init

      - name: Terraform Validate
        id: validate
        working-directory: ${{ env.TERRAFORM_ENV_PATH }}
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TERRAFORM_ENV_PATH }}
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v6
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        working-directory: ${{ env.TERRAFORM_ENV_PATH }}
        run: terraform apply -auto-approve -input=false