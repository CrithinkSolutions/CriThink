name: terraform_environment_deploy
on:
  workflow_call:
    inputs:
      tf_environment:
        required: true
        type: string
        description: "Terraform environment. Possible values are staging and production"

      tf_version:
        required: true
        type: string
        description: "Terraform version"

      acr_name:
        required: true
        type: string
        description: "Azure Container Registry resource name"

    outputs:
      terraform_outputs:
        description: "Terraform outputs as json"
        value: ${{ jobs.deploy.outputs.terraform_deploy_outputs}}

env:
  TERRAFORM_PATH: "./terraform/environments/${{ inputs.tf_environment }}"
  AZURE_OWNER_USERNAME: ${{ secrets.AZURE_OWNER_USERNAME }}
  AZURE_OWNER_PASSWORD: ${{ secrets.AZURE_OWNER_PASSWORD }}
  TERRAFORM_OUTPUT: ""

jobs:
  deploy:
    runs-on: ubuntu-latest

    outputs:
      terraform_deploy_outputs: ${{ steps.step_outputs.outputs.terraformoutputs}}

    steps:
      - name: Preparing
        run: |
          echo 'Preparing deploy of "$TERRAFORM_PATH" environment'

      - name: Checkout
        uses: actions/checkout@v2

      - name: AZ login
        shell: bash
        run: |
          az login -u "$AZURE_OWNER_USERNAME" -p "$AZURE_OWNER_PASSWORD"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.tf_version }}
          terraform_wrapper: false

      # - name: Terraform Format
      #   id: fmt
      #   working-directory: ${{ env.TERRAFORM_PATH }}
      #   run: terraform fmt -check

      - name: Terraform Init
        id: init
        working-directory: ${{ env.TERRAFORM_PATH }}
        run: terraform init

      - name: Terraform Validate
        id: validate
        working-directory: ${{ env.TERRAFORM_PATH }}
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TERRAFORM_PATH }}
        env:
          TF_VAR_acr_name: ${{ inputs.acr_name }}
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        working-directory: ${{ env.TERRAFORM_PATH }}
        env:
          TF_VAR_acr_name: ${{ inputs.acr_name }}
        run: terraform apply -auto-approve -input=false

      - name: Terraform Outputs
        id: step_outputs
        working-directory: ${{ env.TERRAFORM_PATH }}
        run: |
          TERRAFORM_OUTPUT=$(terraform output --json)
          echo "::set-output name=terraformoutputs::"$TERRAFORM_OUTPUT""
